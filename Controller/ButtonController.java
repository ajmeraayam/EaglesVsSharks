package Controller;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JList;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import Model.PlayerRegistry;
import View.SingletonGame;
import Model.SingletonBoard;
import Model.SingletonDice;

/**
* <h1>Button Controller</h1>
* This class is responsible for handling all the button click and list selections done in the Game window.
* <p>
* The Button Controller class handles all the requests generated by the buttons and lists that are placed in the Game at different points in the entire game.
* The class acts as a bridge between the View class and some Model classes to generate and show the data.
* 
*
* @author  Ayam Ajmera
* @version 1.4
* @since   2020-05-05 
*/

public class ButtonController implements ActionListener, ListSelectionListener 
{

	private String listSelectionValue;
	private int listSelectionIndex;
	private int selectionCount = 0;
	private int maxSelection;
	private ArrayList<String> selected = new ArrayList<String>();

	/**
	 * This method handles all the button clicks. Each button click is associated with its action command. Appropriate actions are taken for each button click through this method.
	 * This method overrides the ActionListener interface's actionPerformed method
	 * 
	 * @param e This is the ActionEvent that is recorded when a button is clicked.
	 * @version 1.2
	 * @since 1.0
	 */
	@Override
	public void actionPerformed(ActionEvent e) 
	{
		if(e.getActionCommand().equals("Team Select"))
		{
			if(listSelectionValue != null)
			{
				PlayerRegistry.setPlayerTeams(listSelectionValue);
				SingletonGame.getInstance().showMessage(listSelectionValue + " team selected");
				SingletonGame.getInstance().clearButtonPanel();
				SingletonGame.getInstance().selectPiecesPanel();
			}
			else
			{
				SingletonGame.getInstance().showMessage("Select a team from the list!");
			}
			
		}
		
		if(e.getActionCommand().equals("Piece Select"))
		{
			if(selectionCount < maxSelection)
    		{
    			if(listSelectionIndex != -1)
        		{
    				selected.add(selectionCount, listSelectionValue);
    				PlayerRegistry.getPlayerObj(SingletonGame.getInstance().getWhichPlayerSelecting()).selectPieces(listSelectionValue);
    				SingletonGame.getInstance().removeFromList(listSelectionIndex);
    				selectionCount++;
        		}
    			
    			if(selectionCount == maxSelection)
    			{
    				SingletonGame.getInstance().disableSelectEnableNext();
    			}
    		}
		}
		
		if(e.getActionCommand().equals("Next"))
		{
			if(SingletonGame.getInstance().getWhichPlayerSelecting())					//True for player 1, false for player 2
    		{
    			//PlayerRegistry.getPlayerObj(Game.getInstance().getWhichPlayerSelecting()).selectPieces(selectionIndex);
        		boolean team = SingletonGame.getInstance().getWhichPlayerSelecting();
        		
        		SingletonBoard.getInstance().arrangePieceInitial(PlayerRegistry.getPlayerTeam(team), PlayerRegistry.getPlayerObj(team).getIcons(), PlayerRegistry.getPlayerObj(team).getAllSelectedPieces());
    			
        		this.sendListForDisplay(team);
        		SingletonGame.getInstance().createDataBox(team);
        		SingletonGame.getInstance().clearButtonPanel();
        		SingletonGame.getInstance().setWhichPlayerSelecting(!team);
        		//selectionTeam = !selectionTeam;
        		SingletonGame.getInstance().selectPiecesPanel();
        		selectionCount = 0;
        		//selectionIndex.removeAll(selectionIndex);
        		selected.removeAll(selected);
    		}
    		else if(!SingletonGame.getInstance().getWhichPlayerSelecting())
    		{
    			//PlayerRegistry.getPlayerObj(Game.getInstance().getWhichPlayerSelecting()).selectPieces(selectionIndex);
    			boolean team = SingletonGame.getInstance().getWhichPlayerSelecting();
    			
    			SingletonBoard.getInstance().arrangePieceInitial(PlayerRegistry.getPlayerTeam(team), PlayerRegistry.getPlayerObj(team).getIcons(), PlayerRegistry.getPlayerObj(team).getAllSelectedPieces());
    			
    			this.sendListForDisplay(team);
    			SingletonGame.getInstance().createDataBox(team);
    			selectionCount = 0;
    			SingletonGame.getInstance().clearButtonPanel();
    			//buttonPanel.removeAll();
    			SingletonGame.getInstance().addDiceButtonToPanel();
    		}
		}
		
		if(e.getActionCommand().equals("Dice"))
		{
			SingletonDice.getInstance().rollDice();
		}
		
		if(e.getActionCommand().equals("12x12-4"))
		{
			//Game.getInstance().showMessage("Game created - Board size 12x12; 4 Pieces per team");
			SingletonBoard.getInstance().setBoardColumnsSize(12);
			SingletonGame.getInstance().setBoardSize(12, 12);
			SingletonGame.getInstance().drawGameContainer();
			SingletonGame.getInstance().selectTeam();
			maxSelection = 4;
		}
		
		if(e.getActionCommand().equals("12x12-5"))
		{
			//Game.getInstance().showMessage("Game created - Board size 12x12; 5 Pieces per team");
			SingletonBoard.getInstance().setBoardColumnsSize(12);
			SingletonGame.getInstance().setBoardSize(12, 12);
			SingletonGame.getInstance().drawGameContainer();
			SingletonGame.getInstance().selectTeam();
			maxSelection = 5;
		}
		
		if(e.getActionCommand().equals("12x12-6"))
		{
			//Game.getInstance().showMessage("Game created - Board size 12x12; 6 Pieces per team");
			SingletonBoard.getInstance().setBoardColumnsSize(12);
			SingletonGame.getInstance().setBoardSize(12, 12);
			SingletonGame.getInstance().drawGameContainer();
			SingletonGame.getInstance().selectTeam();
			maxSelection = 6;
		}
		
		if(e.getActionCommand().equals("14x14-4"))
		{
			//Game.getInstance().showMessage("Game created - Board size 14x14; 4 Pieces per team");
			SingletonBoard.getInstance().setBoardColumnsSize(14);
			SingletonGame.getInstance().setBoardSize(14, 14);
			SingletonGame.getInstance().drawGameContainer();
			SingletonGame.getInstance().selectTeam();
			maxSelection = 4;
		}
		
		if(e.getActionCommand().equals("14x14-5"))
		{
			//Game.getInstance().showMessage("Game created - Board size 14x14; 5 Pieces per team");
			SingletonBoard.getInstance().setBoardColumnsSize(14);
			SingletonGame.getInstance().setBoardSize(14, 14);
			SingletonGame.getInstance().drawGameContainer();
			SingletonGame.getInstance().selectTeam();
			maxSelection = 5;
		}
		
		if(e.getActionCommand().equals("14x14-6"))
		{
			//Game.getInstance().showMessage("Game created - Board size 14x14; 6 Pieces per team");
			SingletonBoard.getInstance().setBoardColumnsSize(14);
			SingletonGame.getInstance().setBoardSize(14, 14);
			SingletonGame.getInstance().drawGameContainer();
			SingletonGame.getInstance().selectTeam();
			maxSelection = 6;
		}
		
		if(e.getActionCommand().equals("16x16-4"))
		{
			//Game.getInstance().showMessage("Game created - Board size 16x16; 4 Pieces per team");
			SingletonBoard.getInstance().setBoardColumnsSize(16);
			SingletonGame.getInstance().setBoardSize(16, 16);
			SingletonGame.getInstance().drawGameContainer();
			SingletonGame.getInstance().selectTeam();
			maxSelection = 4;
		}
		
		if(e.getActionCommand().equals("16x16-5"))
		{
			//Game.getInstance().showMessage("Game created - Board size 16x16; 5 Pieces per team");
			SingletonBoard.getInstance().setBoardColumnsSize(16);
			SingletonGame.getInstance().setBoardSize(16, 16);
			SingletonGame.getInstance().drawGameContainer();
			SingletonGame.getInstance().selectTeam();
			maxSelection = 5;
		}
		
		if(e.getActionCommand().equals("16x16-6"))
		{
			//Game.getInstance().showMessage("Game created - Board size 16x16; 6 Pieces per team");
			SingletonBoard.getInstance().setBoardColumnsSize(16);
			SingletonGame.getInstance().setBoardSize(16, 16);
			SingletonGame.getInstance().drawGameContainer();
			SingletonGame.getInstance().selectTeam();
			maxSelection = 6;
		}
	}

	/**
	 * This method handles all the list selection.
	 * This method overrides the ActionListener interface's actionPerformed method
	 * 
	 * @param e This is the ListSelectionEvent that is recorded when an item is selected.
	 * @version 1.1
	 * @since 1.0
	 */
	@Override
	public void valueChanged(ListSelectionEvent e) 
	{
		// TODO Auto-generated method stub
		if (!e.getValueIsAdjusting()) 
		{
	          @SuppressWarnings("unchecked")
	          JList<String> list = (JList<String>) e.getSource();
	          listSelectionIndex = list.getSelectedIndex();
	          //int selections[] = list.getSelectedIndices();
	          listSelectionValue = list.getSelectedValue();
	          //list.remove(listSelectionIndex);
		}
	}
	
	/**
	 * Send the list of names of selected pieces to display in the message box
	 * 
	 * @param team Team that has selected the pieces. TRUE if Player 1 selected, FALSE if Player 2 selected
	 * @version 1.0
	 * @since 1.4
	 */
	private void sendListForDisplay(boolean team)
	{
		String str;
		if(team)
		{
			str = "Player 1 selected - [";
		}
		else
		{
			str = "Player 2 selected - [";
		}
		
		for(int i = 0; i < selected.size(); i++)
		{
			str += " '" + selected.get(i) + "'";
		}
		str += " ]";
		SingletonGame.getInstance().showMessage(str);
	}
}
