import java.awt.*;
import javax.swing.*;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import java.awt.event.*;

public class board extends JFrame implements MouseListener
{
	//Main panel inside the JFrame - set to grid layout equivalent to the board size.
	private JPanel mainPanel = new JPanel(new GridLayout(10,10));	
	
	//Each box is considered as a separate panel
	private JPanel[][] cellPanel = new JPanel[10][10];
	
	//Panel to display dice button and text box
	private JPanel buttonPanel = new JPanel(new BorderLayout());
	
	//Initial location for each piece and value for each panel. Location of each piece is stored in this array and it will be updated at the end of every move.
	private String[][] pieceLocation = new String[][] {{"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "AE", "", "", "", ""}};
	
	//Image of an eagle. For testing purpose
	private ImageIcon americanEagle = new ImageIcon("C:/Users/Ayam/Documents/RMIT/Sem 3/OOSD/Assignment/eagleLogo.png");
	private Container c;
	private Button dice;
	//Textfield to display dice value. Can be changed during further design
	private TextField tf1;
	//Store the xy coordinate of the selected box (while moving pieces)
	private Point pointFrom, pointTo;
	//Dice rolled is to determine if dice is rolled by the user, moveSelect is for validity of selection of piece, eagleTurn will be true if its eagle team's turn and false if its shark team's turn.
	private boolean diceRolled = false, moveSelect = false, eagleTurn = true;
	private int diceVal;
	
	//Constructor
	public board()
	{
		c = getContentPane();
		//Setting the size of the frame and background of the frame
		setBounds(100, 100, 490, 600);
		setBackground(new Color(204, 204, 204));
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setTitle("Game board");
        setResizable(false);
        c.setLayout(null);   
        //Setting the size of the Main panel and background of the panel
        mainPanel.setBounds(10, 10, 460, 460);
        mainPanel.setBackground(new Color(255, 255, 255));
        //Adding main panel to the frame
        c.add(mainPanel);
        
        dice = new Button("Roll dice");
        tf1 = new TextField();
        tf1.setEditable(false);
        buttonPanel.setBounds(10, 480, 400, 50);
        buttonPanel.add(dice, BorderLayout.WEST);
        buttonPanel.add(tf1, BorderLayout.CENTER);
        c.add(buttonPanel);
        
        //When 'Roll dice' button is clicked, a random number is generated between 1 and 6.
        dice.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		int min = 1, max = 6;
	        	
        		diceVal = (int)(Math.random()*((max - min) + 1)) + min;
	        	System.out.println(diceVal);
	        	tf1.setText(diceVal+"");
	        	diceRolled = true;
        	}
        });
        
        //Drawing the board in the main panel and arranging pieces through custom methods
        this.drawBoard();
        this.arrangePieces();
        show();
	}
	
	public void drawBoard()
	{
		int min = 0, max = 9;
		
		for(int y = 0; y < 10; y++)
		{
			for (int x = 0; x < 10; x++)
			{
				cellPanel[y][x] = new JPanel(new BorderLayout());
				cellPanel[y][x].setBorder(new LineBorder(Color.BLACK));
				
				//MouseListener for each box/grid
				cellPanel[y][x].addMouseListener(this);
				
				mainPanel.add(cellPanel[y][x]);
				
				/*We have set a range of 0 to 9 for random integer generator and the number generated by it will determine if the block is white(neutral), light gray(land) or blue(water).
				60% probability of generating a white block and 20% for light gray and blue respectively
				leaving first 2 rows on both sides */
				if(y > 1 && y < 8)
				{
					int rand = (int)(Math.random()*((max - min) + 1)) + min;
					
					if(rand == 0 || rand == 3 || rand == 4 || rand == 6 || rand == 7 || rand == 8)
						cellPanel[y][x].setBackground(Color.WHITE);
					
					else if(rand == 2 || rand == 9)
						cellPanel[y][x].setBackground(Color.LIGHT_GRAY);
					
					else
						cellPanel[y][x].setBackground(Color.BLUE);
				}
				else
					cellPanel[y][x].setBackground(Color.WHITE);
			}
		}
	}
	
	//Recognizing pieces on board for their images/icons. JLabel is used to display icon for any piece
	private JLabel pieceObject(String pieceName)
	{
		JLabel tempLabel;
		
		if(pieceName.equals("AE"))
			tempLabel = new JLabel(this.americanEagle);
		else
			tempLabel = new JLabel();

		return tempLabel;
	}
	
	//Arranging each piece on board
	public void arrangePieces()
	{
		for(int y = 0; y < 10; y++)
		{
			for(int x = 0; x < 10; x++)
			{
				this.cellPanel[y][x].add(this.pieceObject(pieceLocation[y][x]), BorderLayout.CENTER);
				this.cellPanel[y][x].validate();
			}
		}
		
	}
	
	//On mouse click
	public void mouseClicked(MouseEvent e)
	{
		//Retrieve and store the mouse click location
		Object source = e.getSource();
		JPanel tempPanel = (JPanel)source;
		//the size of the Main panel is 460 pixels and there are 10 boxes in each row/column so dividing by 46
		int pointX = (tempPanel.getX()/46);
		int pointY = (tempPanel.getY()/46);
		
		//Piece can move only if the dice is rolled by that user.
		if(this.diceRolled)
		{
			this.moveSelect = !this.moveSelect;
			
			//If user selects empty box or shark piece (when they are eagle) or eagle piece (when they are shark) then it won't highlight the box and user won't be able to complete their turn. Unless user selects their own piece, the move won't complete and the game won't go ahead. When the user selects their piece, they can move as many boxes as the value shown by the dice.
			//NOTE - Add time limit here (in future)
			if(this.moveSelect)
			{
				this.pointFrom = new Point(pointX, pointY);
				if(pieceLocation[this.pointFrom.y][this.pointFrom.x].toString().trim().equals(""))
					this.moveSelect = !this.moveSelect;
				
				if(!pieceLocation[this.pointFrom.y][this.pointFrom.x].toString().trim().equals("") && this.pieceLocation[this.pointFrom.y][this.pointFrom.x].toString().charAt(1) == 'S' && eagleTurn)
					this.moveSelect = !this.moveSelect;
				
				if(!pieceLocation[this.pointFrom.y][this.pointFrom.x].toString().trim().equals("") && this.pieceLocation[this.pointFrom.y][this.pointFrom.x].toString().charAt(1) == 'E' && !eagleTurn)
					this.moveSelect = !this.moveSelect;
				
				if(moveSelect)
					highlightPiece(true);
				
			}
			else
			{
				this.pointTo = new Point(pointX, pointY);
				
				//The piece is restricted by the dice value. If dice shows 3, then the piece can move in 8 directions viz forward, backward, sideways and diagonally forward or backward. If the user selects a piece and then clicks on the piece again, it cancels the selection and lets the user select another piece.
				if(!this.pointFrom.equals(pointTo) && (((Math.abs(pointFrom.y - pointTo.y) == diceVal && Math.abs(pointFrom.x - pointTo.x) == diceVal)) || ((Math.abs(pointFrom.y - pointTo.y) == 0 && Math.abs(pointFrom.x - pointTo.x) == diceVal)) || ((Math.abs(pointFrom.y - pointTo.y) == diceVal && Math.abs(pointFrom.x - pointTo.x) == 0))))
				{
					if(pieceLocation[this.pointTo.y][this.pointTo.x].toString().trim().equals(""))
					{
						this.pieceLocation[this.pointTo.y][this.pointTo.x] = this.pieceLocation[this.pointFrom.y][this.pointFrom.x];
						this.pieceLocation[this.pointFrom.y][this.pointFrom.x] = "";
						this.movePiece();
						this.diceRolled = false;
					}
					//NOTE - Battle and conditions related to battle are to be added here
					else if((pieceLocation[this.pointTo.y][this.pointTo.x].toString().charAt(1) == 'S' && eagleTurn) || (pieceLocation[this.pointTo.y][this.pointTo.x].toString().charAt(1) == 'E' && !eagleTurn))
					{
						this.diceRolled = false;
						//battle();
					}
				}
				else
				{
					this.diceRolled = true;
					highlightPiece(false);
				}
				
			}
		}
	}
	
	//This method moves the piece from initial position to the position selected by the user. Because we are placing the image as a JLabel, we find for JLabel component for that panel. When found, we remove the component and repaint the cell. We then move the piece (icon) from initial position to final position and update the location matrix 
	//NOTE - We can put a condition check for battle here, instead of putting it in mouseClicked method
	public void movePiece()
	{
		for(int i = 0; i < this.cellPanel[this.pointFrom.y][this.pointFrom.x].getComponentCount(); i++)
		{
			if(this.cellPanel[this.pointFrom.y][this.pointFrom.x].getComponent(i).getClass().toString().indexOf("JLabel") > -1)
			{
				this.cellPanel[this.pointFrom.y][this.pointFrom.x].remove(i);
				this.cellPanel[this.pointFrom.y][this.pointFrom.x].repaint();
			}
		}
		
		for(int i = 0; i < this.cellPanel[this.pointTo.y][this.pointTo.x].getComponentCount(); i++)
		{
			if(this.cellPanel[this.pointTo.y][this.pointTo.x].getComponent(i).getClass().toString().indexOf("JLabel") > -1)
			{
				this.cellPanel[this.pointTo.y][this.pointTo.x].remove(i);
				this.cellPanel[this.pointTo.y][this.pointTo.x].repaint();
			}
		}
		
		this.cellPanel[this.pointTo.y][this.pointTo.x].add(this.pieceObject(this.pieceLocation[this.pointTo.y][this.pointTo.x]), BorderLayout.CENTER);
		this.cellPanel[this.pointTo.y][this.pointTo.x].validate();
	}
	
	private void highlightPiece(boolean selected)
    {

		Border grayBorder = BorderFactory.createLineBorder(Color.DARK_GRAY);
	    for(int z = 0; z < this.cellPanel[this.pointFrom.y][this.pointFrom.x].getComponentCount(); z++)
	
	          if(this.cellPanel[this.pointFrom.y][this.pointFrom.x].getComponent(z).getClass().toString().indexOf("JLabel") > -1)
	
	          {
	
	                JLabel lblTemp = (JLabel)this.cellPanel[this.pointFrom.y][this.pointFrom.x].getComponent(z);
	                if(selected)
	                	lblTemp.setBorder(grayBorder);
	                else
	                	lblTemp.setBorder(null);
	                //lblTemp.setEnabled(!selected);
	                //lblTemp.setFocusable(selected);
	
	          }          

    }
	
	public static void main(String[] args)
	{
		board b = new board();
	}
	
	public void mouseEntered(MouseEvent e){} 
    public void mouseReleased(MouseEvent e){}
    public void mouseExited(MouseEvent e){}  
    public void mousePressed(MouseEvent e){}

}
