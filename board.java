//package src;

import java.awt.*;
import javax.swing.*;
import javax.swing.border.LineBorder;
import java.awt.event.*;

public class board extends JFrame
{
	//Main panel inside the JFrame - set to grid layout equivalent to the board size.
	private JPanel mainPanel = new JPanel(new GridLayout(10,10));	
	
	//Each box is considered as a separate panel
	private JPanel[][] cellPanel = new JPanel[10][10];
	
	private JPanel buttonPanel = new JPanel(new BorderLayout());
	
	//Initial location for each piece and value for each panel
	private String[][] pieceLocation = new String[][] {{"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "", "", "", "", ""}, {"", "", "", "", "", "AE", "", "", "", ""}};
	
	//Image of an eagle.
	private ImageIcon americanEagle = new ImageIcon("C:/Users/Ayam/Documents/RMIT/Sem 3/OOSD/Assignment/eagleLogo.png");
	private Container c;
	private Button dice;
	private TextField tf1;
	
	public board()
	{
		c = getContentPane();
		//Setting the size of the frame and background of the frame
		setBounds(100, 100, 490, 600);
		setBackground(new Color(204, 204, 204));
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setTitle("Game board");
        setResizable(false);
        c.setLayout(null);   
        //Setting the size of the Main panel and background of the panel
        mainPanel.setBounds(10, 10, 460, 460);
        mainPanel.setBackground(new Color(255, 255, 255));
        //Adding main panel to the frame
        c.add(mainPanel);
        
        //CustomDice cd = new CustomDice();
        dice = new Button("Roll dice");
        tf1 = new TextField();
        tf1.setEditable(false);
        buttonPanel.setBounds(10, 480, 400, 50);
        buttonPanel.add(dice, BorderLayout.WEST);
        buttonPanel.add(tf1, BorderLayout.CENTER);
        c.add(buttonPanel);
        
        dice.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        	int min = 1, max = 6;
	        	int diceVal = (int)(Math.random()*((max - min) + 1)) + min;
	        	System.out.println(diceVal);
	        	tf1.setText(diceVal+"");
        	}
        });
        
        //dice.addActionListener(cd);
        //tf1.setText(cd.getDiceValue());
        //Drawing the board in the main panel and arranging pieces through custom methods
        this.drawBoard();
        this.arrangePieces();
        show();
	}
	
	public void drawBoard()
	{
		int min = 0, max = 9;
		
		for(int y = 0; y < 10; y++)
		{
			for (int x = 0; x < 10; x++)
			{
				cellPanel[y][x] = new JPanel(new BorderLayout());
				cellPanel[y][x].setBorder(new LineBorder(Color.BLACK));
				
				//Add mouse listener here for each box/grid
				//cellPanel[y][x].addMouseListener(this);
				
				mainPanel.add(cellPanel[y][x]);
				
				//We have set a range of 0 to 9 for random integer generator and the number generated by it will determine if the block is white(neutral), light gray(land) or blue(water).
				//60% probability of generating a white block and 20% for light gray and blue respectively
				//leaving first 2 rows on both sides 
				if(y > 1 && y < 8)
				{
					int rand = (int)(Math.random()*((max - min) + 1)) + min;
					
					if(rand == 0 || rand == 3 || rand == 4 || rand == 6 || rand == 7 || rand == 8)
						cellPanel[y][x].setBackground(Color.WHITE);
					
					else if(rand == 2 || rand == 9)
						cellPanel[y][x].setBackground(Color.LIGHT_GRAY);
					
					else
						cellPanel[y][x].setBackground(Color.BLUE);
				}
				else
					cellPanel[y][x].setBackground(Color.WHITE);
			}
		}
	}
	
	private JLabel pieceObject(String pieceName)
	{
		JLabel tempLabel;
		
		if(pieceName.equals("AE"))
			tempLabel = new JLabel(this.americanEagle);
		else
			tempLabel = new JLabel();

		return tempLabel;
	}
	
	//Arranging each piece on board
	public void arrangePieces()
	{
		for(int y = 0; y < 10; y++)
		{
			for(int x = 0; x < 10; x++)
			{
				this.cellPanel[y][x].add(this.pieceObject(pieceLocation[y][x]), BorderLayout.CENTER);
				this.cellPanel[y][x].validate();
			}
		}
		
	}
	
	
	
	public static void main(String[] args)
	{
		board b = new board();
	}
}
